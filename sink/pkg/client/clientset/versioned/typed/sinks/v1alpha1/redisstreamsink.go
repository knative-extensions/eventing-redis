/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "knative.dev/eventing-redis/sink/pkg/apis/sinks/v1alpha1"
	scheme "knative.dev/eventing-redis/sink/pkg/client/clientset/versioned/scheme"
)

// RedisStreamSinksGetter has a method to return a RedisStreamSinkInterface.
// A group's client should implement this interface.
type RedisStreamSinksGetter interface {
	RedisStreamSinks(namespace string) RedisStreamSinkInterface
}

// RedisStreamSinkInterface has methods to work with RedisStreamSink resources.
type RedisStreamSinkInterface interface {
	Create(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (*v1alpha1.RedisStreamSink, error)
	Update(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (*v1alpha1.RedisStreamSink, error)
	UpdateStatus(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (*v1alpha1.RedisStreamSink, error)
	Delete(ctx context.Context, name string, options *v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(ctx context.Context, name string, options v1.GetOptions) (*v1alpha1.RedisStreamSink, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.RedisStreamSinkList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RedisStreamSink, err error)
	RedisStreamSinkExpansion
}

// redisStreamSinks implements RedisStreamSinkInterface
type redisStreamSinks struct {
	client rest.Interface
	ns     string
}

// newRedisStreamSinks returns a RedisStreamSinks
func newRedisStreamSinks(c *SourcesV1alpha1Client, namespace string) *redisStreamSinks {
	return &redisStreamSinks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the redisStreamSink, and returns the corresponding redisStreamSink object, and an error if there is any.
func (c *redisStreamSinks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RedisStreamSink, err error) {
	result = &v1alpha1.RedisStreamSink{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RedisStreamSinks that match those selectors.
func (c *redisStreamSinks) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.RedisStreamSinkList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.RedisStreamSinkList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested redisStreamSinks.
func (c *redisStreamSinks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a redisStreamSink and creates it.  Returns the server's representation of the redisStreamSink, and an error, if there is any.
func (c *redisStreamSinks) Create(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (result *v1alpha1.RedisStreamSink, err error) {
	result = &v1alpha1.RedisStreamSink{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		Body(redisStreamSink).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a redisStreamSink and updates it. Returns the server's representation of the redisStreamSink, and an error, if there is any.
func (c *redisStreamSinks) Update(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (result *v1alpha1.RedisStreamSink, err error) {
	result = &v1alpha1.RedisStreamSink{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		Name(redisStreamSink.Name).
		Body(redisStreamSink).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *redisStreamSinks) UpdateStatus(ctx context.Context, redisStreamSink *v1alpha1.RedisStreamSink) (result *v1alpha1.RedisStreamSink, err error) {
	result = &v1alpha1.RedisStreamSink{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		Name(redisStreamSink.Name).
		SubResource("status").
		Body(redisStreamSink).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the redisStreamSink and deletes it. Returns an error if one occurs.
func (c *redisStreamSinks) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		Name(name).
		Body(options).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *redisStreamSinks) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("redisstreamsinks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched redisStreamSink.
func (c *redisStreamSinks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RedisStreamSink, err error) {
	result = &v1alpha1.RedisStreamSink{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("redisstreamsinks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
