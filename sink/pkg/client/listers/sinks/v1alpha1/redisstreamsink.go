/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-redis/sink/pkg/apis/sinks/v1alpha1"
)

// RedisStreamSinkLister helps list RedisStreamSinks.
// All objects returned here must be treated as read-only.
type RedisStreamSinkLister interface {
	// List lists all RedisStreamSinks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisStreamSink, err error)
	// RedisStreamSinks returns an object that can list and get RedisStreamSinks.
	RedisStreamSinks(namespace string) RedisStreamSinkNamespaceLister
	RedisStreamSinkListerExpansion
}

// redisStreamSinkLister implements the RedisStreamSinkLister interface.
type redisStreamSinkLister struct {
	indexer cache.Indexer
}

// NewRedisStreamSinkLister returns a new RedisStreamSinkLister.
func NewRedisStreamSinkLister(indexer cache.Indexer) RedisStreamSinkLister {
	return &redisStreamSinkLister{indexer: indexer}
}

// List lists all RedisStreamSinks in the indexer.
func (s *redisStreamSinkLister) List(selector labels.Selector) (ret []*v1alpha1.RedisStreamSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisStreamSink))
	})
	return ret, err
}

// RedisStreamSinks returns an object that can list and get RedisStreamSinks.
func (s *redisStreamSinkLister) RedisStreamSinks(namespace string) RedisStreamSinkNamespaceLister {
	return redisStreamSinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisStreamSinkNamespaceLister helps list and get RedisStreamSinks.
// All objects returned here must be treated as read-only.
type RedisStreamSinkNamespaceLister interface {
	// List lists all RedisStreamSinks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisStreamSink, err error)
	// Get retrieves the RedisStreamSink from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisStreamSink, error)
	RedisStreamSinkNamespaceListerExpansion
}

// redisStreamSinkNamespaceLister implements the RedisStreamSinkNamespaceLister
// interface.
type redisStreamSinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisStreamSinks in the indexer for a given namespace.
func (s redisStreamSinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisStreamSink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisStreamSink))
	})
	return ret, err
}

// Get retrieves the RedisStreamSink from the indexer for a given namespace and name.
func (s redisStreamSinkNamespaceLister) Get(name string) (*v1alpha1.RedisStreamSink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisstreamsink"), name)
	}
	return obj.(*v1alpha1.RedisStreamSink), nil
}
